// Prisma schema for Agentes de Convers√£o API v2.0
// FastAPI Backend Database Schema

generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User Management
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  firstName     String?  @map("first_name")
  lastName      String?  @map("last_name")
  avatarUrl     String?  @map("avatar_url")
  organizationId String? @map("organization_id")
  role          UserRole @default(USER)
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  organization Organization? @relation(fields: [organizationId], references: [id])
  agents       Agent[]
  conversations Conversation[]
  webhooks     Webhook[]
  apiKeys      ApiKey[]

  @@map("users")
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  slug      String?  @unique
  logoUrl   String?  @map("logo_url")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  users         User[]
  agents        Agent[]
  knowledgeBases KnowledgeBase[]
  webhooks      Webhook[]
  settings      Settings[]

  @@map("organizations")
}

// Agent Management
model Agent {
  id               String              @id @default(cuid())
  organizationId   String              @map("organization_id")
  userId           String              @map("user_id")
  name             String
  description      String
  instructions     String
  modelName        String              @default("gpt-4") @map("model_name")
  temperature      Float               @default(0.7)
  visibility       AgentVisibility     @default(PRIVATE)
  iconUrl          String?             @map("icon_url")
  handle           String?             @unique
  includeSources   Boolean             @default(true) @map("include_sources")
  interfaceConfig  Json?               @map("interface_config")
  knowledgeBaseId  String?             @map("knowledge_base_id")
  isActive         Boolean             @default(true) @map("is_active")
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @updatedAt @map("updated_at")

  // Relations
  organization    Organization      @relation(fields: [organizationId], references: [id])
  user            User              @relation(fields: [userId], references: [id])
  knowledgeBase   KnowledgeBase?    @relation(fields: [knowledgeBaseId], references: [id])
  tools           AgentTool[]
  conversations   Conversation[]
  analytics       Analytics[]

  @@map("agents")
}

model AgentTool {
  id        String        @id @default(cuid())
  agentId   String        @map("agent_id")
  type      AgentToolType
  name      String
  config    Json
  isActive  Boolean       @default(true) @map("is_active")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  // Relations
  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("agent_tools")
}

// Conversation Management
model Conversation {
  id        String              @id @default(cuid())
  agentId   String              @map("agent_id")
  userId    String?             @map("user_id")
  visitorId String              @map("visitor_id")
  title     String?
  status    ConversationStatus  @default(ACTIVE)
  metadata  Json?
  createdAt DateTime            @default(now()) @map("created_at")
  updatedAt DateTime            @updatedAt @map("updated_at")

  // Relations
  agent    Agent     @relation(fields: [agentId], references: [id])
  user     User?     @relation(fields: [userId], references: [id])
  messages Message[]

  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String   @map("conversation_id")
  role           String
  content        String
  metadata       Json?
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// Knowledge Base
model KnowledgeBase {
  id             String   @id @default(cuid())
  organizationId String   @map("organization_id")
  name           String
  description    String
  type           String   @default("document")
  visibility     String   @default("private")
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  agents       Agent[]
  documents    Document[]

  @@map("knowledge_bases")
}

model Document {
  id              String   @id @default(cuid())
  knowledgeBaseId String   @map("knowledge_base_id")
  name            String
  content         String
  metadata        Json?
  embedding       String?
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  knowledgeBase KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)

  @@map("documents")
}

// Webhooks
model Webhook {
  id             String        @id @default(cuid())
  organizationId String        @map("organization_id")
  userId         String        @map("user_id")
  name           String
  url            String
  events         String[]
  secret         String
  isActive       Boolean       @default(true) @map("is_active")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")

  // Relations
  organization Organization    @relation(fields: [organizationId], references: [id])
  user         User            @relation(fields: [userId], references: [id])
  deliveries   WebhookDelivery[]

  @@map("webhooks")
}

model WebhookDelivery {
  id         String               @id @default(cuid())
  webhookId  String               @map("webhook_id")
  event      String
  payload    Json
  response   Json?
  status     WebhookDeliveryStatus @default(PENDING)
  attempts   Int                  @default(0)
  createdAt  DateTime             @default(now()) @map("created_at")
  updatedAt  DateTime             @updatedAt @map("updated_at")

  // Relations
  webhook Webhook @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@map("webhook_deliveries")
}

// Analytics
model Analytics {
  id               String   @id @default(cuid())
  agentId          String   @map("agent_id")
  date             DateTime
  conversations    Int      @default(0)
  messages         Int      @default(0)
  averageRating    Float?   @map("average_rating")
  responseTime     Float?   @map("response_time")
  conversionRate   Float?   @map("conversion_rate")
  metadata         Json?
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([agentId, date])
  @@map("analytics")
}

// API Management
model ApiKey {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  name      String
  key       String   @unique
  isActive  Boolean  @default(true) @map("is_active")
  expiresAt DateTime? @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("api_keys")
}

// Settings
model Settings {
  id             String   @id @default(cuid())
  organizationId String   @map("organization_id")
  key            String
  value          Json
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, key])
  @@map("settings")
}

// Enums
enum UserRole {
  ADMIN
  USER
  VIEWER
}

enum AgentVisibility {
  PUBLIC
  PRIVATE
  ORGANIZATION
}

enum AgentToolType {
  HTTP
  SEARCH
  CALCULATOR
  LEAD_CAPTURE
  FORM
  WEBHOOK
}

enum ConversationStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum WebhookDeliveryStatus {
  PENDING
  SUCCESS
  FAILED
  RETRYING
}