#!/usr/bin/env tsx

/**
 * cPanel Diagnostic Script
 * Verifica configura√ß√£o DNS e subdom√≠nios
 */

import { CPanelAPIClient } from '../lib/cpanel/client'
import { SubdomainManager } from '../lib/cpanel/subdomain-manager'

// Configura√ß√£o do cPanel - ajuste conforme necess√°rio
const CPANEL_CONFIG = {
  baseUrl: process.env.CPANEL_BASE_URL || 'https://cpanel.agentesdeconversao.ai:2083',
  username: process.env.CPANEL_USERNAME || 'agentesdeconversao',
  apiToken: process.env.CPANEL_API_TOKEN || 'Q5HZZI8QVOVKP0HI5TDUS83KHCJ6ZZHH',
  domain: 'agentesdeconversao.ai'
}

async function main() {
  console.log('üîç cPanel Diagnostic Tool - Agentes de Convers√£o')
  console.log('=' .repeat(60))
  
  const cpanel = new CPanelAPIClient(CPANEL_CONFIG)
  const subdomainManager = new SubdomainManager()
  
  console.log('üìä Configura√ß√£o:')
  console.log(`   Base URL: ${CPANEL_CONFIG.baseUrl}`)
  console.log(`   Username: ${CPANEL_CONFIG.username}`)
  console.log(`   Domain: ${CPANEL_CONFIG.domain}`)
  console.log()
  
  // 1. Testar conex√£o com cPanel
  console.log('üîå Testando conex√£o com cPanel...')
  try {
    const accountInfo = await cpanel.executeAPI('UserManager', 'get_user_information')
    if (accountInfo.success) {
      console.log('‚úÖ Conex√£o com cPanel estabelecida')
      console.log(`   Usu√°rio: ${accountInfo.data?.login || 'N/A'}`)
      console.log(`   Email: ${accountInfo.data?.email || 'N/A'}`)
    } else {
      console.log('‚ùå Falha na conex√£o com cPanel')
      console.log(`   Erro: ${accountInfo.errors?.join(', ')}`)
      return
    }
  } catch (error) {
    console.log('‚ùå Erro ao conectar com cPanel:', error)
    return
  }
  
  console.log()
  
  // 2. Listar registros DNS atuais
  console.log('üåê Verificando registros DNS...')
  try {
    const dnsRecords = await cpanel.listDNSRecords()
    if (dnsRecords.success && dnsRecords.data) {
      console.log(`‚úÖ Encontrados ${dnsRecords.data.length || 0} registros DNS`)
      
      // Filtrar registros relevantes
      const relevantRecords = dnsRecords.data.filter((record: any) => 
        record.name.includes('agentesdeconversao.ai') && 
        ['A', 'CNAME'].includes(record.type)
      )
      
      console.log('\nüìã Registros DNS relevantes:')
      relevantRecords.forEach((record: any, index: number) => {
        console.log(`   ${index + 1}. ${record.name} ‚Üí ${record.record} (${record.type})`)
      })
    } else {
      console.log('‚ùå Falha ao obter registros DNS')
      console.log(`   Erro: ${dnsRecords.errors?.join(', ')}`)
    }
  } catch (error) {
    console.log('‚ùå Erro ao verificar DNS:', error)
  }
  
  console.log()
  
  // 3. Listar subdom√≠nios existentes
  console.log('üîó Verificando subdom√≠nios existentes...')
  try {
    const subdomains = await cpanel.listSubdomains()
    if (subdomains.success && subdomains.data) {
      console.log(`‚úÖ Encontrados ${subdomains.data.length || 0} subdom√≠nios`)
      
      if (subdomains.data.length > 0) {
        console.log('\nüìã Subdom√≠nios atuais:')
        subdomains.data.forEach((subdomain: any, index: number) => {
          console.log(`   ${index + 1}. ${subdomain.domain} ‚Üí ${subdomain.dir || 'N/A'}`)
        })
      }
    } else {
      console.log('‚ùå Falha ao obter subdom√≠nios')
      console.log(`   Erro: ${subdomains.errors?.join(', ')}`)
    }
  } catch (error) {
    console.log('‚ùå Erro ao verificar subdom√≠nios:', error)
  }
  
  console.log()
  
  // 4. Verificar status dos subdom√≠nios necess√°rios
  console.log('üéØ Verificando status dos subdom√≠nios necess√°rios...')
  const requiredSubdomains = ['lp', 'dash', 'api', 'docs', 'login']
  
  for (const subdomain of requiredSubdomains) {
    try {
      const verification = await cpanel.verifySubdomain(subdomain)
      const status = verification.exists && verification.resolves ? '‚úÖ' : '‚ùå'
      const responseTime = verification.responseTime ? `(${verification.responseTime}ms)` : ''
      
      console.log(`   ${status} ${subdomain}.agentesdeconversao.ai ${responseTime}`)
      
      if (!verification.exists) {
        console.log(`      üîß Solu√ß√£o: Criar registro CNAME para ${subdomain}`)
      } else if (!verification.resolves) {
        console.log(`      üîß Solu√ß√£o: Verificar configura√ß√£o do target`)
      }
    } catch (error) {
      console.log(`   ‚ùå ${subdomain}.agentesdeconversao.ai (erro: ${error})`)
    }
  }
  
  console.log()
  
  // 5. Verificar redirecionamentos
  console.log('üîÑ Verificando redirecionamentos...')
  try {
    const redirects = await cpanel.listRedirects()
    if (redirects.success && redirects.data) {
      console.log(`‚úÖ Encontrados ${redirects.data.length || 0} redirecionamentos`)
      
      if (redirects.data.length > 0) {
        console.log('\nüìã Redirecionamentos ativos:')
        redirects.data.forEach((redirect: any, index: number) => {
          console.log(`   ${index + 1}. ${redirect.source} ‚Üí ${redirect.destination}`)
        })
      }
    } else {
      console.log('‚ùå Falha ao obter redirecionamentos')
    }
  } catch (error) {
    console.log('‚ùå Erro ao verificar redirecionamentos:', error)
  }
  
  console.log()
  
  // 6. Testar resolu√ß√£o DNS externa
  console.log('üåç Testando resolu√ß√£o DNS externa...')
  const testDomains = [
    'agentesdeconversao.ai',
    'lp.agentesdeconversao.ai',
    'dash.agentesdeconversao.ai',
    'api.agentesdeconversao.ai'
  ]
  
  for (const domain of testDomains) {
    try {
      const startTime = Date.now()
      const response = await fetch(`https://${domain}`, { 
        method: 'HEAD',
        signal: AbortSignal.timeout(5000)
      })
      const responseTime = Date.now() - startTime
      
      const status = response.ok ? '‚úÖ' : '‚ö†Ô∏è'
      console.log(`   ${status} ${domain} (${response.status}) ${responseTime}ms`)
      
      if (!response.ok) {
        console.log(`      üîß Status: ${response.status} ${response.statusText}`)
      }
    } catch (error) {
      console.log(`   ‚ùå ${domain} (${error})`)
    }
  }
  
  console.log()
  console.log('=' .repeat(60))
  console.log('üìù Relat√≥rio completo gerado!')
  console.log()
  console.log('üîß Pr√≥ximas a√ß√µes sugeridas:')
  console.log('   1. Verificar registros DNS no registrador do dom√≠nio')
  console.log('   2. Configurar CNAMEs para subdom√≠nios faltantes')
  console.log('   3. Aguardar propaga√ß√£o DNS (at√© 48h)')
  console.log('   4. Testar redirecionamentos da landing page')
}

// Auto-fix mode
async function autoFix() {
  console.log('üîß Modo Auto-Fix - Corrigindo configura√ß√µes automaticamente...')
  console.log('=' .repeat(60))
  
  const subdomainManager = new SubdomainManager()
  
  // Verificar status atual
  const status = await subdomainManager.verifyAllSubdomains()
  console.log('üìä Status atual:')
  status.results.forEach(result => {
    const statusIcon = result.status === 'healthy' ? '‚úÖ' : result.status === 'degraded' ? '‚ö†Ô∏è' : '‚ùå'
    console.log(`   ${statusIcon} ${result.subdomain}.agentesdeconversao.ai`)
  })
  
  if (!status.allHealthy) {
    console.log('\nüîß Corrigindo subdom√≠nios com problemas...')
    
    const deployResult = await subdomainManager.deployAllSubdomains()
    console.log('\nüìä Resultado do deploy:')
    console.log(`   Total: ${deployResult.summary.total}`)
    console.log(`   Sucesso: ${deployResult.summary.successful}`)
    console.log(`   Falhas: ${deployResult.summary.failed}`)
    
    deployResult.results.forEach(result => {
      const statusIcon = result.success ? '‚úÖ' : '‚ùå'
      console.log(`   ${statusIcon} ${result.subdomain}: ${result.success ? result.url : result.error}`)
    })
  } else {
    console.log('‚úÖ Todos os subdom√≠nios est√£o funcionando corretamente!')
  }
}

// CLI Interface
const command = process.argv[2]

if (command === 'fix' || command === 'auto-fix') {
  autoFix().catch(console.error)
} else {
  main().catch(console.error)
}

export { CPANEL_CONFIG }